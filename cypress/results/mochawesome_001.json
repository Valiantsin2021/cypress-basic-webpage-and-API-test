{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-10T20:56:54.766Z",
    "end": "2022-09-10T20:56:57.143Z",
    "duration": 2377,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f9e33604-9252-4d75-93c8-e8a9e88daa87",
      "title": "",
      "fullFile": "cypress\\e2e\\goRestApi.cy.js",
      "file": "cypress\\e2e\\goRestApi.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b8c523bd-c1ca-47ef-8d9c-3030b4beaa01",
          "title": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully perform GET request on GoRest api",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should successfully perform GET request on GoRest api",
              "timedOut": null,
              "duration": 726,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(Cypress.env('urlGoRestApi')).as('request');\ncy.get('@request').then(response => {\n  expect(response.status).to.be.equal(200);\n  assert.isArray(response.body);\n  expect(response.body.length).to.eq(10);\n  for (let obj of response.body) {\n    expect(obj).to.have.keys(['id', 'name', 'email', 'gender', 'status']);\n  }\n});",
              "err": {},
              "uuid": "a678abf4-a1b3-4729-941f-aa4fc11da51a",
              "parentUUID": "b8c523bd-c1ca-47ef-8d9c-3030b4beaa01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully perform POST request on GoRest api and create new user",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should successfully perform POST request on GoRest api and create new user",
              "timedOut": null,
              "duration": 347,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: Cypress.env('urlGoRestApi'),\n  auth: {\n    bearer: Cypress.env('token')\n  },\n  body: newUser\n}).as('newUser');\ncy.get('@newUser').then(response => {\n  expect(response.status).to.be.equal(201);\n  expect(response.body).to.have.keys(['id', 'name', 'email', 'gender', 'status']);\n  cy.wrap(response.body).should('include', {\n    'name': 'Ondatra Zbyshek',\n    'email': 'compass@mail.com',\n    'gender': 'male',\n    'status': 'active'\n  });\n  userId = response.body.id;\n});",
              "err": {},
              "uuid": "1261ca52-5d34-42d4-be96-577c875275fc",
              "parentUUID": "b8c523bd-c1ca-47ef-8d9c-3030b4beaa01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should perform GET request and check the created user appeared in the database",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should perform GET request and check the created user appeared in the database",
              "timedOut": null,
              "duration": 238,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: Cypress.env('urlGoRestApi'),\n  qs: {\n    name: newUser.name\n  }\n}).as('newUser');\ncy.get('@newUser').then(response => {\n  expect(response.status).to.be.equal(200);\n});",
              "err": {},
              "uuid": "b46ec688-acb3-4d81-a82d-33be567ec9b6",
              "parentUUID": "b8c523bd-c1ca-47ef-8d9c-3030b4beaa01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully preform PATCH request to modify the created user",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should successfully preform PATCH request to modify the created user",
              "timedOut": null,
              "duration": 305,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PATCH',\n  url: `${Cypress.env('urlGoRestApi')}${userId}`,\n  auth: {\n    bearer: Cypress.env('token')\n  },\n  body: patchedUser\n}).as('patchedUser');\ncy.get('@patchedUser').then(response => {\n  expect(response.status).to.be.equal(200);\n  cy.wrap(response.body).should('include', {\n    'name': 'Zbyl Onder',\n    'email': 'ontime@mail.com',\n    'gender': 'female',\n    'status': 'inactive'\n  });\n});",
              "err": {},
              "uuid": "2e32a6a1-63db-4e60-8a26-6b500026151c",
              "parentUUID": "b8c523bd-c1ca-47ef-8d9c-3030b4beaa01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should perform GET request and check the updated user appeared in the database",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should perform GET request and check the updated user appeared in the database",
              "timedOut": null,
              "duration": 221,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: Cypress.env('urlGoRestApi'),\n  qs: {\n    name: patchedUser.name\n  }\n}).as('patchedUser');\ncy.get('@patchedUser').then(response => {\n  expect(response.status).to.be.equal(200);\n});",
              "err": {},
              "uuid": "75ba0d92-a676-4730-902c-6c507f3b6c2d",
              "parentUUID": "b8c523bd-c1ca-47ef-8d9c-3030b4beaa01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully preform DELETE request to delete the created user",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should successfully preform DELETE request to delete the created user",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: `${Cypress.env('urlGoRestApi')}${userId}`,\n  auth: {\n    bearer: Cypress.env('token')\n  },\n  failOnStatusCode: false\n}).as('deletedUser');\ncy.get('@deletedUser').then(response => {\n  expect(response.status).to.be.equal(204);\n});",
              "err": {},
              "uuid": "ae09f60d-0686-41ef-a968-894b633f4749",
              "parentUUID": "b8c523bd-c1ca-47ef-8d9c-3030b4beaa01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should perform GET request and check the is not present in the database",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should perform GET request and check the is not present in the database",
              "timedOut": null,
              "duration": 214,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${Cypress.env('urlGoRestApi')}${userId}`,\n  failOnStatusCode: false\n}).as('deletedUser');\ncy.get('@deletedUser').then(response => {\n  expect(response.status).to.be.equal(404);\n  cy.wrap(response.body).should('deep.include', {\n    \"message\": \"Resource not found\"\n  });\n});",
              "err": {},
              "uuid": "e2924103-9145-4b81-bd9a-e87865a6a862",
              "parentUUID": "b8c523bd-c1ca-47ef-8d9c-3030b4beaa01",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a678abf4-a1b3-4729-941f-aa4fc11da51a",
            "1261ca52-5d34-42d4-be96-577c875275fc",
            "b46ec688-acb3-4d81-a82d-33be567ec9b6",
            "2e32a6a1-63db-4e60-8a26-6b500026151c",
            "75ba0d92-a676-4730-902c-6c507f3b6c2d",
            "ae09f60d-0686-41ef-a968-894b633f4749",
            "e2924103-9145-4b81-bd9a-e87865a6a862"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2342,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}