{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-21T16:36:11.393Z",
    "end": "2022-08-21T16:36:15.515Z",
    "duration": 4122,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ac08b7b8-42a8-44da-a5da-622699551d1c",
      "title": "",
      "fullFile": "cypress\\e2e\\simpleBookApi.cy.js",
      "file": "cypress\\e2e\\simpleBookApi.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
          "title": "Open api url and test http requests GET, POST, PATCH and DELETE",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Open Simple Book api url and check response status code",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Open Simple Book api url and check response status code",
              "timedOut": null,
              "duration": 778,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://simple-books-api.glitch.me/status').as('request');\ncy.get('@request').then(response => {\n  expect(response.status).to.be.equal(200);\n});",
              "err": {},
              "uuid": "4b71d962-44ea-4fa7-b739-fdaf60871d31",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check the authentification is already made and is impossible to do again with the same email",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Check the authentification is already made and is impossible to do again with the same email",
              "timedOut": null,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'https://simple-books-api.glitch.me/api-clients/',\n  failOnStatusCode: false,\n  body: {\n    clientName: \"ondra\",\n    clientEmail: \"me@mail.com\"\n  }\n}).as('authRequest');\ncy.get('@authRequest').then(response => {\n  expect(response.status).to.be.equal(409);\n  cy.wrap(response.body).should('deep.include', {\n    error: 'API client already registered. Try a different email.'\n  });\n});",
              "err": {},
              "uuid": "d33b58f6-c2b8-4b1e-a74b-7fe616375499",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get list of all books from the api",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Get list of all books from the api",
              "timedOut": null,
              "duration": 197,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://simple-books-api.glitch.me/books').as('booksRequest');\ncy.get('@booksRequest').then(response => {\n  expect(response.status).to.be.equal(200);\n  assert.isArray(response.body);\n  expect(response.body).have.length(6);\n});",
              "err": {},
              "uuid": "8b4052f0-a3ee-4b6b-91cc-4e8239219070",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filter the list of books from the api to non-fiction",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Filter the list of books from the api to non-fiction",
              "timedOut": null,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'https://simple-books-api.glitch.me/books',\n  qs: {\n    type: 'non-fiction'\n  }\n}).as('nonFiction');\ncy.get('@nonFiction').then(response => {\n  expect(response.status).to.be.equal(200);\n  assert.isArray(response.body);\n  expect(response.body).have.length(2);\n  cy.wrap(response.body[0]).should('deep.include', {\n    id: 2,\n    name: \"Just as I Am\",\n    type: \"non-fiction\",\n    available: false\n  });\n  cy.wrap(response.body[1]).should('contain', {\n    available: true\n  });\n});",
              "err": {},
              "uuid": "2c47318b-a723-4dee-90a5-755decac7ee6",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Find one book with id \"5\" and check it is available",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Find one book with id \"5\" and check it is available",
              "timedOut": null,
              "duration": 215,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `https://simple-books-api.glitch.me/books/${bookId}`\n}).as('singleBook');\ncy.get('@singleBook').then(response => {\n  expect(response.status).to.be.equal(200);\n  cy.wrap(response.body).should('deep.include', {\n    \"id\": 5,\n    \"name\": \"Untamed\",\n    \"author\": \"Glennon Doyle\",\n    \"type\": \"non-fiction\",\n    \"price\": 15.5,\n    \"current-stock\": 20,\n    \"available\": true\n  });\n});",
              "err": {},
              "uuid": "73183c8e-2379-490d-929a-d3572d85bd02",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Order the book with id \"5\" and check it order number",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Order the book with id \"5\" and check it order number",
              "timedOut": null,
              "duration": 333,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `https://simple-books-api.glitch.me/orders`,\n  auth: {\n    bearer: authToken\n  },\n  body: {\n    bookId: bookId,\n    clientName: \"Valentin\"\n  }\n}).as('order');\ncy.get('@order').then(response => {\n  expect(response.status).to.be.equal(201);\n  expect(response.body.created).to.be.true;\n  expect(response.body).to.include.key('orderId');\n  orderId = response.body.orderId;\n});",
              "err": {},
              "uuid": "fcac9614-2b6d-48bf-bdf0-bd113cfa505f",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check the order: undefined is existing",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Check the order: undefined is existing",
              "timedOut": null,
              "duration": 322,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `https://simple-books-api.glitch.me/orders`,\n  auth: {\n    bearer: authToken\n  }\n}).as('order');\ncy.get('@order').then(response => {\n  expect(response.status).to.be.equal(200);\n  expect(response.body).to.have.length(1);\n  expect(response.body[0]).to.include.key('id', 'quantity');\n  expect(response.body[0].id).to.equal(orderId);\n  expect(response.body[0].quantity).to.equal(1);\n});",
              "err": {},
              "uuid": "3efc161a-fb66-4a1b-9d3a-6a1ec4bcd821",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Change customers name in order: undefined using PATCH method and check the orders customer name is changed",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Change customers name in order: undefined using PATCH method and check the orders customer name is changed",
              "timedOut": null,
              "duration": 684,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PATCH',\n  url: `https://simple-books-api.glitch.me/orders/${orderId}`,\n  auth: {\n    bearer: authToken\n  },\n  body: {\n    customerName: 'Val'\n  }\n}).as('order');\ncy.get('@order').then(response => {\n  expect(response.status).to.be.equal(204);\n});\ncy.request({\n  method: 'GET',\n  url: `https://simple-books-api.glitch.me/orders`,\n  auth: {\n    bearer: authToken\n  }\n}).as('order');\ncy.get('@order').then(response => {\n  expect(response.status).to.be.equal(200);\n  expect(response.body[0]).to.include.key('customerName');\n  expect(response.body[0].customerName).to.eql('Val');\n});",
              "err": {},
              "uuid": "224d447b-fb01-4624-bd35-8ceca1735dc6",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete the order: undefined and check there are no active orders",
              "fullTitle": "Open api url and test http requests GET, POST, PATCH and DELETE Delete the order: undefined and check there are no active orders",
              "timedOut": null,
              "duration": 995,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: `https://simple-books-api.glitch.me/orders/${orderId}`,\n  auth: {\n    bearer: authToken\n  }\n}).as('delOrder');\ncy.get('@delOrder').then(response => {\n  expect(response.status).to.be.equal(204);\n});\ncy.request({\n  method: 'GET',\n  url: `https://simple-books-api.glitch.me/orders`,\n  auth: {\n    bearer: authToken\n  }\n}).as('order');\ncy.get('@order').then(response => {\n  expect(response.status).to.be.equal(200);\n  expect(response.body).to.have.length(0);\n});",
              "err": {},
              "uuid": "b43af2d4-f22b-44a3-b874-cc3785f1a616",
              "parentUUID": "dcc07ed3-8268-467b-8839-8b8415b8ac6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4b71d962-44ea-4fa7-b739-fdaf60871d31",
            "d33b58f6-c2b8-4b1e-a74b-7fe616375499",
            "8b4052f0-a3ee-4b6b-91cc-4e8239219070",
            "2c47318b-a723-4dee-90a5-755decac7ee6",
            "73183c8e-2379-490d-929a-d3572d85bd02",
            "fcac9614-2b6d-48bf-bdf0-bd113cfa505f",
            "3efc161a-fb66-4a1b-9d3a-6a1ec4bcd821",
            "224d447b-fb01-4624-bd35-8ceca1735dc6",
            "b43af2d4-f22b-44a3-b874-cc3785f1a616"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3987,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}