{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-10T20:47:05.958Z",
    "end": "2022-09-10T20:47:08.138Z",
    "duration": 2180,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d9cb1ce3-702b-4590-9e03-2b4bf57d6628",
      "title": "",
      "fullFile": "cypress\\e2e\\goRestApi.cy.js",
      "file": "cypress\\e2e\\goRestApi.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aa1426dc-bf62-415e-9a81-2cf4ae822fa3",
          "title": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully perform GET request on GoRest api",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should successfully perform GET request on GoRest api",
              "timedOut": null,
              "duration": 472,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(baseUrl).as('request');\ncy.get('@request').then(response => {\n  expect(response.status).to.be.equal(200);\n  assert.isArray(response.body);\n  expect(response.body.length).to.eq(10);\n  for (let obj of response.body) {\n    expect(obj).to.have.keys(['id', 'name', 'email', 'gender', 'status']);\n  }\n});",
              "err": {},
              "uuid": "08ea10b8-66c5-4f93-a935-f33830a2bc6a",
              "parentUUID": "aa1426dc-bf62-415e-9a81-2cf4ae822fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully perform POST request on GoRest api and create new user",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should successfully perform POST request on GoRest api and create new user",
              "timedOut": null,
              "duration": 334,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: baseUrl,\n  auth: {\n    bearer: authToken\n  },\n  body: newUser\n}).as('newUser');\ncy.get('@newUser').then(response => {\n  expect(response.status).to.be.equal(201);\n  expect(response.body).to.have.keys(['id', 'name', 'email', 'gender', 'status']);\n  cy.wrap(response.body).should('include', {\n    'name': 'Ondatra Zbyshek',\n    'email': 'compass@mail.com',\n    'gender': 'male',\n    'status': 'active'\n  });\n  userId = response.body.id;\n});",
              "err": {},
              "uuid": "2b3667cd-d1f2-4d84-87c3-e8a3f563d34f",
              "parentUUID": "aa1426dc-bf62-415e-9a81-2cf4ae822fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should perform GET request and check the created user appeared in the database",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should perform GET request and check the created user appeared in the database",
              "timedOut": null,
              "duration": 236,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: baseUrl,\n  qs: {\n    name: newUser.name\n  }\n}).as('newUser');\ncy.get('@newUser').then(response => {\n  expect(response.status).to.be.equal(200);\n});",
              "err": {},
              "uuid": "71e78b6a-12ee-4320-9280-7aba40ad63d8",
              "parentUUID": "aa1426dc-bf62-415e-9a81-2cf4ae822fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully preform PATCH request to modify the created user",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should successfully preform PATCH request to modify the created user",
              "timedOut": null,
              "duration": 344,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PATCH',\n  url: `${baseUrl}${userId}`,\n  auth: {\n    bearer: authToken\n  },\n  body: patchedUser\n}).as('patchedUser');\ncy.get('@patchedUser').then(response => {\n  expect(response.status).to.be.equal(200);\n  cy.wrap(response.body).should('include', {\n    'name': 'Zbyl Onder',\n    'email': 'ontime@mail.com',\n    'gender': 'female',\n    'status': 'inactive'\n  });\n});",
              "err": {},
              "uuid": "9f465ebe-8c28-40b8-971f-f7c219f118a0",
              "parentUUID": "aa1426dc-bf62-415e-9a81-2cf4ae822fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should perform GET request and check the updated user appeared in the database",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should perform GET request and check the updated user appeared in the database",
              "timedOut": null,
              "duration": 233,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: baseUrl,\n  qs: {\n    name: patchedUser.name\n  }\n}).as('patchedUser');\ncy.get('@patchedUser').then(response => {\n  expect(response.status).to.be.equal(200);\n});",
              "err": {},
              "uuid": "3387086e-fa29-4856-8e7c-17357deddbbc",
              "parentUUID": "aa1426dc-bf62-415e-9a81-2cf4ae822fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully preform DELETE request to delete the created user",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should successfully preform DELETE request to delete the created user",
              "timedOut": null,
              "duration": 301,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: `${baseUrl}${userId}`,\n  auth: {\n    bearer: authToken\n  },\n  failOnStatusCode: false\n}).as('deletedUser');\ncy.get('@deletedUser').then(response => {\n  expect(response.status).to.be.equal(204);\n});",
              "err": {},
              "uuid": "c4c371dd-659a-4f0f-af4c-f813e7986cad",
              "parentUUID": "aa1426dc-bf62-415e-9a81-2cf4ae822fa3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should perform GET request and check the is not present in the database",
              "fullTitle": "Open GoRest api url and test http requests GET, POST, PATCH and DELETE should perform GET request and check the is not present in the database",
              "timedOut": null,
              "duration": 218,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${baseUrl}${userId}`,\n  failOnStatusCode: false\n}).as('deletedUser');\ncy.get('@deletedUser').then(response => {\n  expect(response.status).to.be.equal(404);\n  cy.wrap(response.body).should('deep.include', {\n    \"message\": \"Resource not found\"\n  });\n});",
              "err": {},
              "uuid": "d8a5efeb-f1ac-408d-9d95-95b9939d2b34",
              "parentUUID": "aa1426dc-bf62-415e-9a81-2cf4ae822fa3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08ea10b8-66c5-4f93-a935-f33830a2bc6a",
            "2b3667cd-d1f2-4d84-87c3-e8a3f563d34f",
            "71e78b6a-12ee-4320-9280-7aba40ad63d8",
            "9f465ebe-8c28-40b8-971f-f7c219f118a0",
            "3387086e-fa29-4856-8e7c-17357deddbbc",
            "c4c371dd-659a-4f0f-af4c-f813e7986cad",
            "d8a5efeb-f1ac-408d-9d95-95b9939d2b34"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}